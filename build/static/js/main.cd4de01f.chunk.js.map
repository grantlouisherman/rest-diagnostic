{"version":3,"sources":["components/MethodSelectTag.jsx","components/ItemToDiagnose.jsx","utils.js","containers/ItemsToDiagnoseContainer.jsx","containers/DiagnosticContainer.jsx","serviceWorker.js","index.js"],"names":["MethodSelectTag","props","useEffect","document","getElementById","concat","method","index","selected","react_default","a","createElement","id","ItemToDiagnose","className","for","onChange","event","addUrlPath","target","value","data","url","JSON","stringify","headers","components_MethodSelectTag","updateFetchBody","body","deconstructResponse","fetchResponse","Array","isArray","deconstructedResponseArray","forEach","responseObj","Object","assign","shouldConstructFetchRequest","_ref","asyncToGenerator","regenerator_default","mark","_callee","query","options","fetchRequest","fetchRequestJson","responseBody","wrap","_context","prev","next","mode","fetch","sent","json","abrupt","status","stop","_x","_x2","_x3","_x4","apply","this","arguments","createCallAPIStrucutre","debounceFuncWrapper","fn","debounce","DiagnoseCalls","calls","callStack","keys","map","callKey","callStackKey","push","Promise","all","then","catch","console","error","loadYaml","file","yaml","load","ItemsToDiagnoseContainer","_this","apiCallKeys","apiCalls","apiCallKey","idx","components_ItemToDiagnose","key","addHeader","onClick","runCallDiagnostic","Component","DiagnosticContainer","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","addNewApiCall","_this$state","state","API_CALLS","idCounter","newIdCount","setState","headerBody","log","stringifiedBody","diagnosedCalls","objectSpread","showDiagnosedCallsView","handleFileLoad","e","content","fileReader","result","parsedJSON","uploadedFile","fileUpload","onloadend","readAsText","files","showFileUpload","FileReader","undefined","cols","rows","containers_ItemsToDiagnoseContainer","type","Boolean","window","location","hostname","match","ReactDOM","render","containers_DiagnosticContainer","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cd4de01f.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\n\nconst MethodSelectTag = props => {\n  useEffect(() => {\n    document.getElementById(`${props.method}-${props.index}` || `GET-${props.index}`).selected = true\n  });\n    return (\n    <select id='method'>\n      <option id={`GET-${props.index}`}>GET</option>\n      <option id={`POST-${props.index}`}>POST</option>\n      <option id={`PUT-${props.index}`}>PUT</option>\n    </select>\n    )\n}\n\nexport default MethodSelectTag","import React from 'react'\n\nimport MethodSelectTag from './MethodSelectTag'\nimport HeadersView  from './HeadersView'\n\nconst ItemToDiagnose = (props) => (\n  <div className='fetchItem'>\n    <div>\n      <label for='url'> url </label>\n      <input\n        onChange={event => ( props.addUrlPath(props.id, event.target.value))}\n        id={`url-${props.index}`}\n        value={props.data.url ? props.data.url : \"\"}\n        />\n    </div>\n    <div>\n      <label for='headers'> headers </label>\n      <textarea value={ JSON.stringify(props.data.headers) }/>\n      {/* <HeadersView {...props.data.headers} /> */}\n    </div>\n    <div>\n      <label for='method'> method </label>\n      <MethodSelectTag method={props.data.method} index={props.index}/>\n    </div>\n    <div>\n      <label for='body'> body </label>\n      <input\n        onChange={event => ( props.updateFetchBody(props.id, event.target.value))}\n        id={`body-${props.index}`}\n        value={props.data.body ? props.data.body : \"\"}\n        />\n    </div>\n  </div>\n)\n\nexport default ItemToDiagnose\n","import debounce from 'lodash/debounce'\nimport yaml from 'js-yaml'\n\nconst deconstructResponse = fetchResponse => {\n  if(!Array.isArray(fetchResponse)){\n    return fetchResponse\n  }\n  let deconstructedResponseArray = {}\n  fetchResponse.forEach(responseObj => {\n    deconstructedResponseArray = Object.assign({}, deconstructedResponseArray, responseObj )\n  })\n  return deconstructedResponseArray\n}\n\nexport const shouldConstructFetchRequest = async (method, headers, query, url) => {\n  const body = method === 'POST' ? JSON.stringify({ query }) : null\n  const options = {\n    method,\n    mode: 'cors',\n    headers,\n    body\n  }\n  const fetchRequest = await fetch(url, options)\n  const fetchRequestJson = await fetchRequest.json()\n  const responseBody = deconstructResponse(fetchRequestJson)\n  return {\n      status: fetchRequest.status,\n      responseBody\n    }\n\n}\n\nexport const createCallAPIStrucutre = id => ({\n  id,\n  headers: {},\n  url: '',\n  body: '',\n  method: 'GET'\n})\n\nexport const debounceFuncWrapper = fn => debounce(fn, 1000)\n\nexport const DiagnoseCalls = calls => {\n  const callStack = []\n  const callStackKeys = Object.keys(calls).map(callKey => calls[callKey])\n  callStackKeys.forEach( callStackKey => {\n    const { method, headers, body, url } = callStackKey\n    callStack.push(shouldConstructFetchRequest(method, headers, body, url))\n  })\n  return Promise.all(callStack)\n  .then(calls => calls )\n  .catch(console.error)\n}\n\nexport const loadYaml = file => yaml.load(file)\n","import React, { Component } from 'react'\nimport '../App.css';\nimport ItemToDiagnose from '../components/ItemToDiagnose'\nimport { debounceFuncWrapper } from '../utils.js'\n\nclass ItemsToDiagnoseContainer extends Component {\n  render(){\n    const apiCallKeys = Object.keys(this.props.apiCalls)\n    return (\n      <div>\n      {\n        apiCallKeys ? apiCallKeys.map((apiCallKey, idx) => (\n          <ItemToDiagnose\n            key={idx}\n            index={idx}\n            data={this.props.apiCalls[apiCallKey]}\n            addUrlPath={debounceFuncWrapper(this.props.addUrlPath)}\n            updateFetchBody={debounceFuncWrapper(this.props.updateFetchBody)}\n            addHeader={debounceFuncWrapper(this.props.addHeader)}\n            />\n        )) : null\n      }\n      <button onClick={this.props.runCallDiagnostic}>Diagnose Calls</button>\n      </div>\n    )\n  }\n}\n\nexport default ItemsToDiagnoseContainer\n","import React, {Component} from 'react'\nimport ItemsToDiagnoseContainer from './ItemsToDiagnoseContainer'\nimport {createCallAPIStrucutre, DiagnoseCalls, loadYaml } from '../utils.js'\n\nclass DiagnosticContainer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      API_CALLS: {},\n      idCounter: 0,\n      fileReader : new FileReader(),\n      uploadedFile: false,\n      diagnosedCalls: {},\n      showDiagnosedCallsView: false\n    }\n  }\n\n  addNewApiCall = () => {\n    const { API_CALLS, idCounter } = this.state\n    API_CALLS[idCounter] = createCallAPIStrucutre(idCounter)\n    let newIdCount = idCounter + 1\n    this.setState({API_CALLS:API_CALLS, idCounter:newIdCount})\n  }\n\n  addUrlPath = (key, value ) => {\n    const { API_CALLS } = this.state\n    API_CALLS[key].url = value\n    this.setState({API_CALLS})\n  }\n\n  updateFetchBody = (key, value ) => {\n    const { API_CALLS } = this.state\n    API_CALLS[key].body = value\n    this.setState({API_CALLS})\n  }\n\n  addHeader = (key, headerBody) => {\n    const { API_CALLS } = this.state\n    console.log(key, headerBody)\n    const stringifiedBody = JSON.stringify(headerBody)\n    API_CALLS[key].headers = stringifiedBody\n    this.setState({API_CALLS})\n  }\n\n  runCallDiagnostic = async () => {\n   const diagnosedCalls = await DiagnoseCalls(this.state.API_CALLS)\n   this.setState({\n    diagnosedCalls: { ...diagnosedCalls }, \n    showDiagnosedCallsView: true \n  })\n  }\n\n  handleFileLoad = e => {\n    const content = this.state.fileReader.result\n    const parsedJSON = loadYaml(content)\n    const { API_CALLS } = this.state\n    let { idCounter } = this.state\n    parsedJSON.calls.forEach(call => {\n      call.id = idCounter\n      API_CALLS[idCounter] = call\n      idCounter++\n    })\n    this.setState({API_CALLS:API_CALLS, idCounter:idCounter, uploadedFile: true})\n  }\n  fileUpload = (event) => {\n    this.state.fileReader.onloadend = this.handleFileLoad\n    this.state.fileReader.readAsText(event.target.files[0])\n  }\n\n  showFileUpload = e => {\n    this.setState({\n      showDiagnosedCallsView: false,\n      uploadedFile: false,\n      diagnosedCalls: {},\n      API_CALLS: {}\n    })\n  }\n\n  render() {\n    if(this.state.showDiagnosedCallsView){\n      return(\n        <div>\n        <textarea value={JSON.stringify(this.state.diagnosedCalls,undefined, 4)} cols=\"50\" rows=\"25\" />\n        <button onClick={this.showFileUpload}>Reset</button>\n        </div>\n\n      )\n    }\n    return (\n      <div>\n      {\n        this.state.uploadedFile ?\n        <ItemsToDiagnoseContainer\n          apiCalls={this.state.API_CALLS}\n          addNewApiCall={this.addNewApiCall}\n          addUrlPath={this.addUrlPath}\n          updateFetchBody={this.updateFetchBody}\n          addHeader={this.addHeader}\n          runCallDiagnostic={this.runCallDiagnostic}\n        /> :\n        <input id=\"the-file-input\" type=\"file\" onChange={this.fileUpload}/>\n      }\n      </div>\n    )\n  }\n}\n\nexport default DiagnosticContainer\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport DiagnosticContainer from './containers/DiagnosticContainer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<DiagnosticContainer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}