{"version":3,"sources":["utils.js","reducers/diagnostic.js","components/MethodSelectTag.jsx","components/Icon.jsx","components/ItemToDiagnose.jsx","containers/DiagnosticContainer.jsx","serviceWorker.js","reducers/index.js","index.js"],"names":["deconstructResponse","fetchResponse","Array","isArray","deconstructedResponseArray","forEach","responseObj","Object","assign","shouldConstructFetchRequest","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","method","headers","query","url","callId","body","options","fetchRequest","fetchRequestJson","responseBody","wrap","_context","prev","next","JSON","stringify","mode","fetch","sent","json","abrupt","status","stop","_x","_x2","_x3","_x4","_x5","apply","this","arguments","updateFetchBody","itemKey","value","objectKey","type","payload","diagnosticReducer","state","length","undefined","action","apisCalls","file","yaml","load","loadYaml","result","calls","API_CALLS","call","idx","id","_action$payload","itemWithUpdatedFetchBody","newStateWithUpdatedData","callsUpdatedWithResponseInformation","keys","currentCall","_action$payload$callI","_action$payload2","error","data","MethodSelectTag","props","useLayoutEffect","selectedFetchMethod","concat","index","document","querySelector","selected","react_default","createElement","onChange","onChangeFetchBody","className","Icon","responseStaus","connect","diagnosticItems","diagnostic","currentItem","event","keyToUpdate","target","split","for","class","disabled","components_MethodSelectTag","components_Icon","diagnosticContent","uploadFiled","readFileContent","diagnosticHandler","callsArray","dispatch","callStack","map","callKey","callStackKey","push","Promise","all","then","catch","console","DiagnoseCalls","finishedCalls","err","problemWithDiagnosingCalls","_useState","useState","_useState2","slicedToArray","isDiagnosedCallView","setDiagnosedCallView","_useState3","_useState4","diagnosedCalls","setDiagnosedCalls","_useState5","_useState6","isDiagnosticContentLoaded","setDiagnosticContentLoaded","runCallDiagnostic","_objectSpread","apiCallKey","components_ItemToDiagnose","key","fileReader","FileReader","onloadend","evt","readAsText","files","onClick","e","Boolean","window","location","hostname","match","reducers","combineReducers","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","es","store","containers_DiagnosticContainer","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8823c0ed.chunk.js","sourcesContent":["import yaml from 'js-yaml'\n\nconst deconstructResponse = fetchResponse => {\n  if(!Array.isArray(fetchResponse)){\n    return fetchResponse\n  }\n  let deconstructedResponseArray = {}\n  fetchResponse.forEach(responseObj => {\n    deconstructedResponseArray = Object.assign({}, deconstructedResponseArray, responseObj )\n  })\n  return deconstructedResponseArray\n}\n\nexport const shouldConstructFetchRequest = async (method, headers, query, url, callId) => {\n  const body = method === 'POST' ? JSON.stringify({ query }) : null\n  const options = {\n    method,\n    mode: 'cors',\n    headers,\n    body\n  }\n  const fetchRequest = await fetch(url, options)\n  const fetchRequestJson = await fetchRequest.json()\n  const responseBody = deconstructResponse(fetchRequestJson)\n  return {\n      status: fetchRequest.status,\n      responseBody,\n      callId\n    }\n\n}\n\nexport const DiagnoseCalls = calls => {\n  const callStack = []\n  const callStackKeys = Object.keys(calls).map(callKey => calls[callKey])\n  callStackKeys.forEach( callStackKey => {\n    const { method, headers, body, url, id } = callStackKey\n    callStack.push(shouldConstructFetchRequest(method, headers, body, url, id))\n  })\n  return Promise.all(callStack)\n  .then(calls => calls )\n  .catch(console.error)\n}\n\nexport const loadYaml = file => yaml.load(file)\n","import { loadYaml } from '../utils.js'\nimport { DiagnoseCalls } from '../utils.js'\n\n/* Actions */\nconst UPLOAD_FILE = 'UPLOAD_FILE'\nconst UPDATE_DIAGNOSTIC_BODY = 'UPDATE_DIAGNOSTIC_BODY'\nconst DIAGNOSE_CALLS = 'DIAGNOSE_CALLS'\nconst ERROR = 'ERROR'\n\n/*  Action Creators    */\nexport const uploadFiled = (readFileContent) => {\n    return {\n        type: UPLOAD_FILE,\n        payload: readFileContent\n    }\n}\n\nexport const updateFetchBody = (itemKey, value, objectKey) => {\n    return {\n        type: UPDATE_DIAGNOSTIC_BODY,\n        payload: {\n            itemKey,\n            value,\n            objectKey\n        }\n    }\n}\n\nconst diagnosCalls = (diagnosedCalls ) => {\n    return {\n        type: DIAGNOSE_CALLS,\n        payload: diagnosedCalls\n    }\n}\n\nconst problemWithDiagnosingCalls = (err) => {\n    return {\n        type: ERROR,\n        payload: {\n            error:true,\n            data: err\n        }\n    }\n}\n\nexport const diagnosticHandler = (callsArray) => {\n    return (dispatch) => {\n        DiagnoseCalls(callsArray)\n            .then(finishedCalls => dispatch(diagnosCalls(finishedCalls)))\n            .catch(err => dispatch(problemWithDiagnosingCalls(err)))\n    }\n}\n\nconst diagnosticReducer = (state={}, action) => {\n    switch(action.type){\n        case UPLOAD_FILE:\n            const file = action.payload.result\n            const apisCalls = loadYaml(file).calls\n            const API_CALLS = {}\n            apisCalls.forEach((call, idx) => {\n                call.id = idx\n                API_CALLS[idx] = call\n              })\n              return Object.assign({}, state, API_CALLS)\n\n        case UPDATE_DIAGNOSTIC_BODY:\n            const { itemKey, value, objectKey } = action.payload\n            const itemWithUpdatedFetchBody = state[itemKey]\n            itemWithUpdatedFetchBody[objectKey] = value\n            const newStateWithUpdatedData = state\n            newStateWithUpdatedData[itemKey] = itemWithUpdatedFetchBody\n            return Object.assign({}, state, newStateWithUpdatedData)\n\n\n        case DIAGNOSE_CALLS:\n            let callsUpdatedWithResponseInformation = state\n            Object.keys(action.payload).forEach( callId => {\n                let currentCall = callsUpdatedWithResponseInformation[callId]\n                const { status, responseBody} = action.payload[callId]\n                currentCall.status = status\n            })\n            return Object.assign({}, state, callsUpdatedWithResponseInformation)\n\n            return state\n        case ERROR:\n            const { error, data } = action.payload\n            return Object.assign({}, state, {error, data})\n        default:\n            return state\n    }\n}\n\nexport default diagnosticReducer\n","import React, { useLayoutEffect } from 'react'\n\nconst MethodSelectTag = props => {\n  useLayoutEffect(() => {\n    const selectedFetchMethod = `method-${props.index}-${props.method}` || `method-${props.index}-GET`\n    document.querySelector(`#${selectedFetchMethod}`).selected = true\n  },[props.method, props.index]);\n\n    return (\n    <select\n      id='method'\n      onChange={props.onChangeFetchBody}\n      className=\"ui selection dropdown\" >\n      <option id={`method-${props.index}-GET`}>GET</option>\n      <option id={`method-${props.index}-POST`}>POST</option>\n      <option id={`method-${props.index}-PUT`}>PUT</option>\n    </select>\n    )\n}\n\nexport default MethodSelectTag\n","// <i className=\"plus icon circle\"></i>\n// <i className=\"exclamation circle icon\"></i>\n// <i className=\"question circle icon\"></i>\nimport React from 'react'\n\nconst Icon = ({ responseStaus}) => {\n    if(responseStaus === 200) {\n        return <i className=\"plus icon circle\"></i>\n    }\n\n    if(responseStaus == 500){\n        return <i className=\"exclamation circle icon\"></i>\n    }\n    return <i className=\"question circle icon\"></i>\n}\n\nexport default Icon;\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport MethodSelectTag from './MethodSelectTag'\nimport { updateFetchBody } from '../reducers/diagnostic'\nimport Icon from \"./Icon\";\n\nconst ItemToDiagnose = (props) => {\n  const currentItem = props.diagnosticItems[props.index]\n  const { updateFetchBody } = props\n  const onChangeFetchBody = event => {\n    const keyToUpdate = event.target.id.split('-')[0]\n    updateFetchBody(props.index, event.target.value, keyToUpdate)\n  }\n  return (\n    <div className='fetchItem for wide column'>\n    <div className=\"space-internal\">\n      <label for='url' className=\"ui horizontal label\"> url </label>\n      <div class=\"ui input\">\n        <input\n          onChange={onChangeFetchBody}\n          id={`url-${props.index}`}\n          value={currentItem && currentItem.url ? currentItem.url : \"\"}\n          />\n      </div>\n    </div>\n    <div className=\"space-internal\">\n      <label for='headers' className=\"ui horizontal label\"> headers </label>\n      <textarea\n        className=\"styled-text-area\"\n        id={`headers-${props.index}`}\n        disabled={true}\n        value={ currentItem && currentItem.headers ? JSON.stringify(currentItem.headers) : '' }\n      />\n      {/* <HeadersView {...currentItem.headers} /> */}\n    </div>\n    <div className=\"space-internal\">\n      <label for='method' className=\"ui horizontal label\"> method </label>\n      <MethodSelectTag\n        method={currentItem && currentItem.method}\n        index={props.index}\n        onChangeFetchBody={onChangeFetchBody}\n        />\n    </div>\n    <div className=\"space-internal\">\n      <label for='body' className=\"ui horizontal label\"> body </label>\n      <div class=\"ui input\">\n      <input\n        onChange={onChangeFetchBody}\n        id={`body-${props.index}`}\n        value={currentItem && currentItem.body ? currentItem.body : \"\"}\n        />\n      </div>\n    </div>\n      <div className=\"space-internal\">\n        <label className=\"ui horizontal label\"> status of call </label>\n        <Icon responseStaus={currentItem.status} />\n      </div>\n  </div>\n  )\n}\n\nconst mapStateToProps = state => {\n  const { diagnostic } = state\n  return {\n    diagnosticItems: diagnostic\n  }\n}\nexport default connect(mapStateToProps, { updateFetchBody })(ItemToDiagnose)\n","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport { uploadFiled, updateFetchBody, diagnosticHandler } from '../reducers/diagnostic'\n\nimport ItemToDiagnose from '../components/ItemToDiagnose'\n\nconst DiagnosticContainer = props => {\n  const [isDiagnosedCallView, setDiagnosedCallView] = useState(false)\n  const [diagnosedCalls, setDiagnosedCalls] = useState({})\n  const [isDiagnosticContentLoaded, setDiagnosticContentLoaded] = useState(false)\n\n  const runCallDiagnostic = async () => {\n    await props.diagnosticHandler(props.diagnosticContent)\n    setDiagnosedCallView(true)\n    setDiagnosedCalls({ ...diagnosedCalls })\n  }\n\n  const fileUpload = (event) => {\n    const fileReader = new FileReader()\n    fileReader.onloadend = (evt) => ( props.uploadFiled(fileReader) )\n    fileReader.readAsText(event.target.files[0])\n    setDiagnosticContentLoaded(true)\n  }\n\n  const showFileUpload = e => {\n    setDiagnosedCallView(false)\n    setDiagnosticContentLoaded(false)\n  }\n\n    return (\n\n      <div>\n      {\n        isDiagnosticContentLoaded ?\n        Object.keys(props.diagnosticContent).map((apiCallKey, idx) => (\n          <div className=\"ui grid\">\n            <ItemToDiagnose\n              key={`idx-${setDiagnosedCallView}`}\n              index={apiCallKey}\n              isDiagnosedCallView={isDiagnosedCallView}\n            />\n          </div>\n        ))\n        :\n        <div className=\"ui placeholder segment\">\n            <div class=\"ui icon header\">\n              <i class=\"file outline icon\"></i>\n                Please Upload Instructions\n              </div>\n              <div className=\"ui primary button\">\n              <input id=\"the-file-input\" type=\"file\" onChange={fileUpload}/>\n              </div>\n        </div>\n      }\n      { isDiagnosticContentLoaded ?\n      <div className=\"btn-container\">\n      <button\n        onClick={runCallDiagnostic}\n        className=\"ui primary button\">\n          Diagnose Calls\n          </button>\n        <button \n          onClick={showFileUpload}\n          className=\"ui primary button\">\n            Reset\n          </button>\n      </div>\n        : null }\n      </div>\n    )\n  }\n\n\nconst mapStateToProps = state => {\n  const { diagnostic } = state\n  return {\n    diagnosticContent: diagnostic\n  }\n}\nexport default connect(mapStateToProps, { uploadFiled, updateFetchBody, diagnosticHandler })(DiagnosticContainer)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers, applyMiddleware, compose } from 'redux'\nimport { createStore } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunk from 'redux-thunk';\n\nimport diagnostic from './diagnostic'\n\nconst reducers = combineReducers({\n    diagnostic\n})\n\nexport default createStore(reducers, composeWithDevTools( applyMiddleware(thunk)))\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\n\n\nimport './index.css';\nimport DiagnosticContainer from './containers/DiagnosticContainer';\nimport * as serviceWorker from './serviceWorker';\nimport store from './reducers'\n\nReactDOM.render(\n    <Provider store={store}>\n        <DiagnosticContainer />\n    </Provider>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}