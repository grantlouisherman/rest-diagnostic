{"version":3,"sources":["components/ItemToDiagnose.jsx","utils.js","containers/ItemsToDiagnoseContainer.jsx","containers/DiagnosticContainer.jsx","serviceWorker.js","index.js"],"names":["ItemToDiagnose","props","react_default","a","createElement","className","for","onChange","event","addUrlPath","id","target","value","data","url","headers","updateFetchBody","body","createCallAPIStrucutre","method","debounceFuncWrapper","fn","debounce","DiagnoseCalls","calls","callStack","Object","keys","map","callKey","forEach","callStackKey","push","fetch","mode","then","response","json","shouldConstructFetchRequest","Promise","all","console","log","ItemsToDiagnoseContainer","_this","this","apiCallKeys","apiCalls","apiCallKey","components_ItemToDiagnose","key","addHeader","onClick","runCallDiagnostic","Component","DiagnosticContainer","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","addNewApiCall","_this$state","state","API_CALLS","idCounter","newIdCount","setState","headerBody","stringifiedBody","JSON","stringify","handleFileLoad","e","content","fileReader","result","parsedJSON","parse","uploadedFile","fileUpload","onloadend","readAsText","files","FileReader","containers_ItemsToDiagnoseContainer","type","Boolean","window","location","hostname","match","ReactDOM","render","containers_DiagnosticContainer","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e3ae3866.chunk.js","sourcesContent":["import React from 'react'\n\nconst ItemToDiagnose = (props) => (\n  <div className='fetchItem'>\n    <div>\n      <label for='url'> url </label>\n      <input\n        onChange={event => ( props.addUrlPath(props.id, event.target.value))}\n        id='url'\n        value={props.data.url ? props.data.url : null}\n        />\n    </div>\n    <div>\n      <label for='headers'> headers </label>\n      <textarea value={props.headers ? props.headers : \"{}\"}/>\n    </div>\n    <div>\n      <label for='method'> method </label>\n      <select id='method'>\n        <option id='GET'>GET</option>\n        <option id='POST'>POST</option>\n        <option id='PUT'>PUT</option>\n      </select>\n    </div>\n    <div>\n      <label for='body'> body </label>\n      <input\n        onChange={event => ( props.updateFetchBody(props.id, event.target.value))}\n        id='body'\n        value={props.data.body ? props.data.body : null}\n        />\n    </div>\n  </div>\n)\n\nexport default ItemToDiagnose\n","import debounce from 'lodash/debounce'\nexport const shouldConstructFetchRequest = (method, headers, body, url) => (\n  fetch(url, {\n    method,\n    mode: 'cors',\n    headers\n  })\n  .then(response => response.json())\n)\n\nexport const createCallAPIStrucutre = id => ({\n  id,\n  headers: {},\n  url: '',\n  body: '',\n  method: 'GET'\n})\n\nexport const debounceFuncWrapper = fn => debounce(fn, 1000)\n\nexport const DiagnoseCalls = calls => {\n  const callStack = []\n  const callStackKeys = Object.keys(calls).map(callKey => calls[callKey])\n  callStackKeys.forEach( callStackKey => {\n    const { method, headers, body, url } = callStackKey\n    callStack.push(shouldConstructFetchRequest(method, headers, body, url))\n  })\n  return Promise.all(callStack)\n  .then(calls => {\n    console.log(calls)\n  })\n}\n","import React, { Component } from 'react'\nimport '../App.css';\nimport ItemToDiagnose from '../components/ItemToDiagnose'\nimport { debounceFuncWrapper } from '../utils.js'\n\nclass ItemsToDiagnoseContainer extends Component {\n  render(){\n    const apiCallKeys = Object.keys(this.props.apiCalls)\n    return (\n      <div>\n      {\n        apiCallKeys ? apiCallKeys.map(apiCallKey => (\n          <ItemToDiagnose\n            key={this.props.apiCalls[apiCallKey].id}\n            data={this.props.apiCalls[apiCallKey]}\n            addUrlPath={debounceFuncWrapper(this.props.addUrlPath)}\n            updateFetchBody={debounceFuncWrapper(this.props.updateFetchBody)}\n            addHeader={debounceFuncWrapper(this.props.addHeader)}\n            />\n        )) : null\n      }\n      <button onClick={this.props.runCallDiagnostic}>Diagnose Calls</button>\n      </div>\n    )\n  }\n}\n\nexport default ItemsToDiagnoseContainer\n","import React, {Component} from 'react'\nimport ItemsToDiagnoseContainer from './ItemsToDiagnoseContainer'\nimport {createCallAPIStrucutre, DiagnoseCalls} from '../utils.js'\n\nclass DiagnosticContainer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      API_CALLS: {},\n      idCounter: 0,\n      fileReader : new FileReader(),\n      uploadedFile: false\n    }\n  }\n\n  addNewApiCall = () => {\n    const { API_CALLS, idCounter } = this.state\n    API_CALLS[idCounter] = createCallAPIStrucutre(idCounter)\n    let newIdCount = idCounter + 1\n    this.setState({API_CALLS:API_CALLS, idCounter:newIdCount})\n  }\n\n  addUrlPath = (key, value ) => {\n    const { API_CALLS } = this.state\n    API_CALLS[key].url = value\n    this.setState({API_CALLS})\n  }\n\n  updateFetchBody = (key, value ) => {\n    const { API_CALLS } = this.state\n    API_CALLS[key].body = value\n    this.setState({API_CALLS})\n  }\n\n  addHeader = (key, headerBody) => {\n    const { API_CALLS } = this.state\n    const stringifiedBody = JSON.stringify(headerBody)\n    API_CALLS[key].headers = stringifiedBody\n    this.setState({API_CALLS})\n  }\n\n  runCallDiagnostic = () => {\n   console.log(DiagnoseCalls(this.state.API_CALLS))\n  }\n\n  handleFileLoad = e => {\n    const content = this.state.fileReader.result\n    const parsedJSON = JSON.parse(content)\n    const { API_CALLS } = this.state\n    let { idCounter } = this.state\n    parsedJSON.calls.forEach(call => {\n      call.id = idCounter\n      API_CALLS[idCounter] = call\n      idCounter++\n    })\n    this.setState({API_CALLS:API_CALLS, idCounter:idCounter, uploadedFile: true})\n  }\n  fileUpload = (event) => {\n    this.state.fileReader.onloadend = this.handleFileLoad\n    this.state.fileReader.readAsText(event.target.files[0])\n  }\n\n  render() {\n    return (\n      <div>\n      {\n        this.state.uploadedFile ?\n        <ItemsToDiagnoseContainer\n          apiCalls={this.state.API_CALLS}\n          addNewApiCall={this.addNewApiCall}\n          addUrlPath={this.addUrlPath}\n          updateFetchBody={this.updateFetchBody}\n          addHeader={this.addHeader}\n          runCallDiagnostic={this.runCallDiagnostic}\n        /> :\n        <input id=\"the-file-input\" type=\"file\" onChange={this.fileUpload}/>\n      }\n      </div>\n    )\n  }\n}\n\nexport default DiagnosticContainer\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport DiagnosticContainer from './containers/DiagnosticContainer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<DiagnosticContainer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}